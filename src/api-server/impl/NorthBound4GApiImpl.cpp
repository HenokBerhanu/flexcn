/**
 * FlexCN_4G_API
 * This API allows SPGWC to communicate with FlexCN. Equivalent of LLMEC API.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "NorthBound4GApiImpl.h"
namespace oai {
namespace flexcn_server {
namespace api {

using namespace oai::flexcn_server::model;

NorthBound4GApiImpl::NorthBound4GApiImpl(
    const std::shared_ptr<Pistache::Rest::Router>& rtr,
    std::shared_ptr<App4G> flexcn_app_inst)
    : NorthBound4GApi(rtr), m_flexcn_app(flexcn_app_inst) {}

void NorthBound4GApiImpl::add_bearer(
    const Bearer& bearer, Pistache::Http::ResponseWriter& response) {
  nlohmann::json j;
  Bearer lBearer = Bearer(bearer);
  bool status    = m_flexcn_app->add_bearer(lBearer);
  if (status) {
    to_json(j, bearer);
    std::cout << "Received bearer as below: \n " << j.dump(4).c_str()
              << std::endl;
    response.send(Pistache::Http::Code::Ok, "Successfully operation\n");
  } else {
    response.send(Pistache::Http::Code::Bad_Request, "Invalid bearer");
  }
}
void NorthBound4GApiImpl::delete_a_single_bearer_by_imsi_bearer(
    const std::string& imsiBearer, Pistache::Http::ResponseWriter& response) {
  bool status = m_flexcn_app->delete_a_single_bearer_by_imsi_bearer(imsiBearer);
  if (status) {
    response.send(Pistache::Http::Code::Ok, "Successfully operation\n");
  } else {
    response.send(Pistache::Http::Code::Bad_Request, "Invalid imsi");
  }
}
void NorthBound4GApiImpl::delete_a_single_bearer_by_id(
    const std::string& id, Pistache::Http::ResponseWriter& response) {
  bool status = m_flexcn_app->delete_a_single_bearer_by_id(id);
  if (status) {
    response.send(Pistache::Http::Code::Ok, "Successfully operation\n");
  } else {
    response.send(Pistache::Http::Code::Bad_Request, "Invalid id");
  }
}
void NorthBound4GApiImpl::delete_all_bearers(
    Pistache::Http::ResponseWriter& response) {
  bool status = m_flexcn_app->delete_all_bearers();
  if (status) {
    response.send(Pistache::Http::Code::Ok, "Successfully operation\n");
  } else {
    response.send(Pistache::Http::Code::Bad_Request, "Invalid request");
  }
}
void NorthBound4GApiImpl::get_stats(Pistache::Http::ResponseWriter& response) {
  std::vector<Bearer> stats = m_flexcn_app->get_stats();
  uint8_t http_code         = 0;
  nlohmann::json j          = stats;
  // to_json(j, stats);
  response.headers().add<Pistache::Http::Header::ContentType>(
      Pistache::Http::Mime::MediaType("application/problem+json"));
  response.send(Pistache::Http::Code(http_code), j.dump(4).c_str());
}
void NorthBound4GApiImpl::get_stats_by_imsi_bearer(
    const std::string& imsiBearer, Pistache::Http::ResponseWriter& response) {
  std::vector<Bearer> stats =
      m_flexcn_app->get_stats_by_imsi_bearer(imsiBearer);
  uint8_t http_code = 0;
  nlohmann::json j  = stats;
  // to_json(j, stats);
  response.headers().add<Pistache::Http::Header::ContentType>(
      Pistache::Http::Mime::MediaType("application/problem+json"));
  response.send(Pistache::Http::Code(http_code), j.dump(4).c_str());
}

void NorthBound4GApiImpl::get_stats_by_id(
    const std::string& id, Pistache::Http::ResponseWriter& response) {
  std::vector<Bearer> stats = m_flexcn_app->get_stats_by_id(id);
  if (stats.size() != 1) {
    response.send(Pistache::Http::Code::Bad_Request, "Invalid request");
    return;
  }

  Bearer single_stat = stats[0];
  uint8_t http_code  = 0;
  nlohmann::json j;
  to_json(j, single_stat);
  response.headers().add<Pistache::Http::Header::ContentType>(
      Pistache::Http::Mime::MediaType("application/problem+json"));
  response.send(Pistache::Http::Code(http_code), j.dump(4).c_str());
}
}  // namespace api
}  // namespace flexcn_server
}  // namespace oai
