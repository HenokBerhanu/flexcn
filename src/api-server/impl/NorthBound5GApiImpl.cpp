/**
 * FlexCN Northbound API
 * This API allows xApps to communicate with FlexCN.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "NorthBound5GApiImpl.h"
#include "flexcn.h"

namespace oai {
namespace flexcn_server {
namespace api {

using namespace oai::flexcn_server::model;

NorthBound5GApiImpl::NorthBound5GApiImpl(
    const std::shared_ptr<Pistache::Rest::Router>& rtr)
    : NorthBound5GApi(rtr) {}

void NorthBound5GApiImpl::add_monitoring_iapp(
    const std::shared_ptr<MonitoringAppAPI>& iapp) {
  m_iapps[iapp->get_type()] = iapp;
}

void NorthBound5GApiImpl::add_control_iapp(
    const std::shared_ptr<iApp_api>& iapp) {
  // TODO: add control app to this server
}

void NorthBound5GApiImpl::get_stats(Pistache::Http::ResponseWriter& response) {
  response.headers().add<Pistache::Http::Header::ContentType>(

      Pistache::Http::Mime::MediaType("application/problem+json"));
  uint8_t http_code = 0;

  std::string final_response = "";
  bool first                 = true;
  // concat all the data into a string
  for (auto const& [key, val] : m_iapps) {
    if (!first) {
      final_response += ",";
    } else {
      final_response += "[";
    }

    final_response +=
        nf_type_e2str[val->get_type()] + ":" + val->retrieve_all_data();
    first = false;
  }

  if (!first) {
    final_response += "]";
  }

  response.send(Pistache::Http::Code(http_code), final_response);
}

void NorthBound5GApiImpl::get_stats_per_ue(
    const std::string& ueid, Pistache::Http::ResponseWriter& response) {
  response.headers().add<Pistache::Http::Header::ContentType>(
      Pistache::Http::Mime::MediaType("application/problem+json"));
  uint8_t http_code = 0;

  std::string final_response = "";
  bool first                 = true;

  // concat all the data into a string
  for (auto const& [key, val] : m_iapps) {
    if (!first) {
      final_response += ",";
    } else {
      final_response += "[";
    }

    final_response +=
        nf_type_e2str[val->get_type()] + ":" + val->retrieve_data_by_key(ueid);
    first = false;
  }

  if (!first) {
    final_response += "]";
  }

  response.send(Pistache::Http::Code(http_code), final_response);
}

void NorthBound5GApiImpl::trigger_subcribe(
    const std::string& ueid, Pistache::Http::ResponseWriter& response) {
  int res = -1;
  if (ueid == "smf") {
    if (m_iapps.count(nf_type_s::NF_TYPE_SMF) == 1) {
      res = m_iapps[nf_type_s::NF_TYPE_SMF]->subcribe_to_nf();
    } else
      res = 1;

  } else if (ueid == "amf") {
    if (m_iapps.count(nf_type_s::NF_TYPE_AMF) == 1) {
      res = m_iapps[nf_type_s::NF_TYPE_AMF]->subcribe_to_nf();
    } else
      res = 1;
  }

  if (res == 0) {
    response.send(Pistache::Http::Code::Ok, "Trigger successfully\n");
  } else if (res == 1) {
    response.send(
        Pistache::Http::Code::Not_Found, "Failed - Trigger UNsuccessfully\n");
  } else {
    response.send(
        Pistache::Http::Code::Expectation_Failed,
        "Failed - Trigger UNsuccessfully\n");
  }
}

}  // namespace api
}  // namespace flexcn_server
}  // namespace oai
