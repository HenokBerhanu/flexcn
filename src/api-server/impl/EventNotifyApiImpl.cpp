/**
 * Nflexcn_EventExposure
 * Session Management Event Exposure Service. Â© 2019, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0.alpha-1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

/*
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.1  (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-------------------------------------------------------------------------------
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */

#include "EventNotifyApiImpl.h"

#include "logger.hpp"

extern oai::flexcn::app::flexcn_config flexcn_cfg;

namespace oai {
namespace flexcn_server {
namespace api {

using namespace oai::flexcn_server::model;

EventNotifyApiImpl::EventNotifyApiImpl(
    std::shared_ptr<Pistache::Rest::Router> rtr, std::string address)
    : EventNotifyApi(rtr), m_address(address) {}

void EventNotifyApiImpl::receive_status_notification(
    const std::string& notifRef, const std::string& eventExposureNotification,
    Pistache::Http::ResponseWriter& response) {
  Logger::flexcn_api_server().info("NotifRef: %s", notifRef.c_str());
  Logger::flexcn_api_server().info(
      "Received data: %s", eventExposureNotification.c_str());

  m_iapps[notifRef]->persist_data(eventExposureNotification, "", 0);
  response.send(Pistache::Http::Code(200));
}

void EventNotifyApiImpl::add_iapp(std::shared_ptr<MonitoringAppAPI> iapp) {
  m_iapps[iapp->get_notif_ref()] = iapp;
}

}  // namespace api
}  // namespace flexcn_server
}  // namespace oai
