/**
 * Nsmf_EventExposure
 * Session Management Event Exposure Service. Â© 2019, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0.alpha-1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

/*
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.1  (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-------------------------------------------------------------------------------
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */

#include "FlexCNStatImpl.h"
#include "logger.hpp"
#include "flexcn_config.hpp"

extern oai::flexcn::app::flexcn_config flexcn_cfg;

namespace oai {
namespace flexcn_server {
namespace api {

using namespace oai::flexcn_server::model;

FlexCNStatImpl::FlexCNStatImpl(
    std::shared_ptr<Pistache::Rest::Router> rtr,
    oai::flexcn::app::flexcn_app* flexcn_app_inst, std::string address)
    : FlexCNStat(rtr), m_flexcn_app(flexcn_app_inst), m_address(address) {}

void FlexCNStatImpl::receive_stat_request(
    Pistache::Http::ResponseWriter& response) {
  Logger::flexcn_api_server().info(
      "FlexCNStatImpl, received a stat request...");

  // // Handle the message in flexcn_app
  uint8_t http_code = 0;
  response.headers().add<Pistache::Http::Header::ContentType>(
      Pistache::Http::Mime::MediaType("application/problem+json"));
}

}  // namespace api
}  // namespace flexcn_server
}  // namespace oai
