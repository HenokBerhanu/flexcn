/**
* FlexCN_4G_API
* This API allows SPGWC to communicate with FlexCN. Equivalent of LLMEC API.  
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * DefaultApi.h
 *
 * 
 */

#ifndef DefaultApi_H_
#define DefaultApi_H_


#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>

#include <utility>

#include "logger.hpp"

#include "Bearer.h"
#include <string>

namespace oai {
namespace flexcn_server {
namespace api {

class  NorthBound4GApi {
public:
    explicit NorthBound4GApi(const std::shared_ptr<Pistache::Rest::Router>& rtr);
    virtual ~NorthBound4GApi() = default;
    void init();

    static const std::string base;

private:
    void setupRoutes();

    void add_bearer_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void delete_a_single_bearer_by_imsi_bearer_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void delete_a_single_bearer_by_id_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void delete_all_bearers_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_stats_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_stats_by_imsi_bearer_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_stats_by_id_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void default_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);

    const std::shared_ptr<Pistache::Rest::Router> router;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during Parameter parsing and validation.
    /// May be overriden to return custom error formats.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleParsingException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during processing of the request in handler functions.
    /// May be overriden to return custom error formats.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleOperationException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Adds a new user
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="bearer"> (optional)</param>
    virtual void add_bearer(const oai::flexcn_server::model::Bearer &bearer, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// TBD
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="imsiBearer">id of each Bearer</param>
    virtual void delete_a_single_bearer_by_imsi_bearer(const std::string &imsiBearer, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// TBD
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">id of each Bearer</param>
    virtual void delete_a_single_bearer_by_id(const std::string &id, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// TBD
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    virtual void delete_all_bearers(Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// return every stats that FlexCN has.
    /// </summary>
    /// <remarks>
    /// Retrieves all stats that FlexCN received from 5G core components without processing.
    /// </remarks>
    virtual void get_stats(Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// return every stats that FlexCN has.
    /// </summary>
    /// <remarks>
    /// Retrieves all stats that FlexCN received from 5G core components without processing.
    /// </remarks>
    /// <param name="imsiBearer">id of each Bearer</param>
    virtual void get_stats_by_imsi_bearer(const std::string &imsiBearer, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// return every stats that FlexCN has.
    /// </summary>
    /// <remarks>
    /// Retrieves all stats that FlexCN received from 5G core components without processing.
    /// </remarks>
    /// <param name="id">id of each Bearer</param>
    virtual void get_stats_by_id(const std::string &id, Pistache::Http::ResponseWriter &response) = 0;

};

}  // namespace api
}  // namespace flexcn_server
}  // namespace oai

#endif /* DefaultApi_H_ */

