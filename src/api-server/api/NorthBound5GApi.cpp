/**
 * FlexCN Northbound API
 * This API allows xApps to communicate with FlexCN.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "NorthBound5GApi.h"
#include "Helpers.h"

namespace oai::flexcn_server::api {

using namespace oai::flexcn_server::helpers;
using namespace oai::flexcn_server::model;

const std::string NorthBound5GApi::base = "/nxapp/v1";

NorthBound5GApi::NorthBound5GApi(
    const std::shared_ptr<Pistache::Rest::Router>& rtr)
    : router(rtr) {}

void NorthBound5GApi::init() {
  setupRoutes();
}

void NorthBound5GApi::setupRoutes() {
  using namespace Pistache::Rest;

  Routes::Get(
      *router, base + "/stats",
      Routes::bind(&NorthBound5GApi::get_stats_handler, this));
  Routes::Get(
      *router, base + "/stats/:ueid",
      Routes::bind(&NorthBound5GApi::get_stats_per_ue_handler, this));
  Routes::Get(
      *router, base + "/trigger_subcribe/:ueid",
      Routes::bind(&NorthBound5GApi::trigger_subcribe_handler, this));

  // Default handler, called when a route is not found
  router->addCustomHandler(
      Routes::bind(&NorthBound5GApi::default_api_default_handler, this));
}

std::pair<Pistache::Http::Code, std::string>
NorthBound5GApi::handleParsingException(
    const std::exception& ex) const noexcept {
  try {
    throw ex;
  } catch (nlohmann::detail::exception& e) {
    return std::make_pair(Pistache::Http::Code::Bad_Request, e.what());
  } catch (oai::flexcn_server::helpers::ValidationException& e) {
    return std::make_pair(Pistache::Http::Code::Bad_Request, e.what());
  }
}

std::pair<Pistache::Http::Code, std::string>
NorthBound5GApi::handleOperationException(
    const std::exception& ex) const noexcept {
  return std::make_pair(Pistache::Http::Code::Internal_Server_Error, ex.what());
}

void NorthBound5GApi::get_stats_handler(
    const Pistache::Rest::Request&, Pistache::Http::ResponseWriter response) {
  try {
    try {
      this->get_stats(response);
    } catch (Pistache::Http::HttpError& e) {
      response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
      return;
    } catch (std::exception& e) {
      const std::pair<Pistache::Http::Code, std::string> errorInfo =
          this->handleOperationException(e);
      response.send(errorInfo.first, errorInfo.second);
      return;
    }

  } catch (std::exception& e) {
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
  }
}
void NorthBound5GApi::get_stats_per_ue_handler(
    const Pistache::Rest::Request& request,
    Pistache::Http::ResponseWriter response) {
  try {
    // Getting the path params
    auto ueid = request.param(":ueid").as<std::string>();

    try {
      this->get_stats_per_ue(ueid, response);
    } catch (Pistache::Http::HttpError& e) {
      response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
      return;
    } catch (std::exception& e) {
      const std::pair<Pistache::Http::Code, std::string> errorInfo =
          this->handleOperationException(e);
      response.send(errorInfo.first, errorInfo.second);
      return;
    }

  } catch (std::exception& e) {
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
  }
}

void NorthBound5GApi::trigger_subcribe_handler(
    const Pistache::Rest::Request& request,
    Pistache::Http::ResponseWriter response) {
  try {
    // Getting the path params
    auto ueid = request.param(":ueid").as<std::string>();

    try {
      this->trigger_subcribe(ueid, response);
    } catch (Pistache::Http::HttpError& e) {
      response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
      return;
    } catch (std::exception& e) {
      const std::pair<Pistache::Http::Code, std::string> errorInfo =
          this->handleOperationException(e);
      response.send(errorInfo.first, errorInfo.second);
      return;
    }

  } catch (std::exception& e) {
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
  }
}

void NorthBound5GApi::default_api_default_handler(
    const Pistache::Rest::Request&, Pistache::Http::ResponseWriter response) {
  response.send(
      Pistache::Http::Code::Not_Found, "The requested method does not exist");
}

}  // namespace oai::flexcn_server::api
