/**
 * FlexCN_4G_API
 * This API allows SPGWC to communicate with FlexCN. Equivalent of LLMEC API.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "NorthBound4GApi.h"
#include "Helpers.h"

namespace oai {
namespace flexcn_server {
namespace api {

using namespace oai::flexcn_server::helpers;
using namespace oai::flexcn_server::model;

const std::string NorthBound4GApi::base = "/n4g/v1";  //

NorthBound4GApi::NorthBound4GApi(
    const std::shared_ptr<Pistache::Rest::Router>& rtr)
    : router(rtr) {}

void NorthBound4GApi::init() {
  setupRoutes();
}

void NorthBound4GApi::setupRoutes() {
  using namespace Pistache::Rest;

  Routes::Post(
      *router, base + "/bearer",
      Routes::bind(&NorthBound4GApi::add_bearer_handler, this));
  Routes::Delete(
      *router, base + "/bearer/imsi_bearer/:imsi_bearer",
      Routes::bind(
          &NorthBound4GApi::delete_a_single_bearer_by_imsi_bearer_handler,
          this));
  Routes::Delete(
      *router, base + "/bearer/id/:id",
      Routes::bind(
          &NorthBound4GApi::delete_a_single_bearer_by_id_handler, this));
  Routes::Delete(
      *router, base + "/bearer",
      Routes::bind(&NorthBound4GApi::delete_all_bearers_handler, this));
  Routes::Get(
      *router, base + "/bearer",
      Routes::bind(&NorthBound4GApi::get_stats_handler, this));
  Routes::Get(
      *router, base + "/bearer/imsi_bearer/:imsi_bearer",
      Routes::bind(&NorthBound4GApi::get_stats_by_imsi_bearer_handler, this));
  Routes::Get(
      *router, base + "/bearer/id/:id",
      Routes::bind(&NorthBound4GApi::get_stats_by_id_handler, this));

  // Default handler, called when a route is not found
  router->addCustomHandler(
      Routes::bind(&NorthBound4GApi::default_api_default_handler, this));
}

std::pair<Pistache::Http::Code, std::string>
NorthBound4GApi::handleParsingException(
    const std::exception& ex) const noexcept {
  try {
    throw ex;
  } catch (nlohmann::detail::exception& e) {
    return std::make_pair(Pistache::Http::Code::Bad_Request, e.what());
  } catch (oai::flexcn_server::helpers::ValidationException& e) {
    return std::make_pair(Pistache::Http::Code::Bad_Request, e.what());
  }
}

std::pair<Pistache::Http::Code, std::string>
NorthBound4GApi::handleOperationException(
    const std::exception& ex) const noexcept {
  return std::make_pair(Pistache::Http::Code::Internal_Server_Error, ex.what());
}

void NorthBound4GApi::add_bearer_handler(
    const Pistache::Rest::Request& request,
    Pistache::Http::ResponseWriter response) {
  try {
    // Getting the body param

    Bearer bearer;

    try {
      nlohmann::json::parse(request.body()).get_to(bearer);
      bearer.validate();
    } catch (std::exception& e) {
      const std::pair<Pistache::Http::Code, std::string> errorInfo =
          this->handleParsingException(e);
      response.send(errorInfo.first, errorInfo.second);
      return;
    }

    try {
      this->add_bearer(bearer, response);
    } catch (Pistache::Http::HttpError& e) {
      response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
      return;
    } catch (std::exception& e) {
      const std::pair<Pistache::Http::Code, std::string> errorInfo =
          this->handleOperationException(e);
      response.send(errorInfo.first, errorInfo.second);
      return;
    }

  } catch (std::exception& e) {
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
  }
}
void NorthBound4GApi::delete_a_single_bearer_by_imsi_bearer_handler(
    const Pistache::Rest::Request& request,
    Pistache::Http::ResponseWriter response) {
  try {
    // Getting the path params
    auto imsiBearer = request.param(":imsi_bearer").as<std::string>();

    try {
      this->delete_a_single_bearer_by_imsi_bearer(imsiBearer, response);
    } catch (Pistache::Http::HttpError& e) {
      response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
      return;
    } catch (std::exception& e) {
      const std::pair<Pistache::Http::Code, std::string> errorInfo =
          this->handleOperationException(e);
      response.send(errorInfo.first, errorInfo.second);
      return;
    }

  } catch (std::exception& e) {
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
  }
}
void NorthBound4GApi::delete_a_single_bearer_by_id_handler(
    const Pistache::Rest::Request& request,
    Pistache::Http::ResponseWriter response) {
  try {
    // Getting the path params
    auto id = request.param(":id").as<std::string>();

    try {
      this->delete_a_single_bearer_by_id(id, response);
    } catch (Pistache::Http::HttpError& e) {
      response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
      return;
    } catch (std::exception& e) {
      const std::pair<Pistache::Http::Code, std::string> errorInfo =
          this->handleOperationException(e);
      response.send(errorInfo.first, errorInfo.second);
      return;
    }

  } catch (std::exception& e) {
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
  }
}
void NorthBound4GApi::delete_all_bearers_handler(
    const Pistache::Rest::Request&, Pistache::Http::ResponseWriter response) {
  try {
    try {
      this->delete_all_bearers(response);
    } catch (Pistache::Http::HttpError& e) {
      response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
      return;
    } catch (std::exception& e) {
      const std::pair<Pistache::Http::Code, std::string> errorInfo =
          this->handleOperationException(e);
      response.send(errorInfo.first, errorInfo.second);
      return;
    }

  } catch (std::exception& e) {
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
  }
}
void NorthBound4GApi::get_stats_handler(
    const Pistache::Rest::Request&, Pistache::Http::ResponseWriter response) {
  try {
    try {
      this->get_stats(response);
    } catch (Pistache::Http::HttpError& e) {
      response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
      return;
    } catch (std::exception& e) {
      const std::pair<Pistache::Http::Code, std::string> errorInfo =
          this->handleOperationException(e);
      response.send(errorInfo.first, errorInfo.second);
      return;
    }

  } catch (std::exception& e) {
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
  }
}
void NorthBound4GApi::get_stats_by_imsi_bearer_handler(
    const Pistache::Rest::Request& request,
    Pistache::Http::ResponseWriter response) {
  try {
    // Getting the path params
    auto imsiBearer = request.param(":imsi_bearer").as<std::string>();
    try {
      this->get_stats_by_imsi_bearer(imsiBearer, response);
    } catch (Pistache::Http::HttpError& e) {
      response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
      return;
    } catch (std::exception& e) {
      const std::pair<Pistache::Http::Code, std::string> errorInfo =
          this->handleOperationException(e);
      response.send(errorInfo.first, errorInfo.second);
      return;
    }

  } catch (std::exception& e) {
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
  }
}
void NorthBound4GApi::get_stats_by_id_handler(
    const Pistache::Rest::Request& request,
    Pistache::Http::ResponseWriter response) {
  try {
    // Getting the path params
    auto id = request.param(":id").as<std::string>();

    try {
      this->get_stats_by_id(id, response);
    } catch (Pistache::Http::HttpError& e) {
      response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
      return;
    } catch (std::exception& e) {
      const std::pair<Pistache::Http::Code, std::string> errorInfo =
          this->handleOperationException(e);
      response.send(errorInfo.first, errorInfo.second);
      return;
    }

  } catch (std::exception& e) {
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
  }
}

void NorthBound4GApi::default_api_default_handler(
    const Pistache::Rest::Request&, Pistache::Http::ResponseWriter response) {
  response.send(
      Pistache::Http::Code::Not_Found, "The requested method does not exist");
}

}  // namespace api
}  // namespace flexcn_server
}  // namespace oai
