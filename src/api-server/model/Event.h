/**
* FlexCN Northbound API
* This API allows xApps to communicate with FlexCN. 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * Event.h
 *
 * A text message describing an error
 */

#ifndef Event_H_
#define Event_H_


#include <string>
#include "SmfEvent.h"
#include <nlohmann/json.hpp>

namespace oai {
namespace flexcn_server {
namespace model {

/// <summary>
/// A text message describing an error
/// </summary>
class  Event
{
public:
    Event();
    virtual ~Event() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    bool operator==(const Event& rhs) const;
    bool operator!=(const Event& rhs) const;

    /////////////////////////////////////////////
    /// Event members

    /// <summary>
    /// a short form unique determine id of ue and 4g/5g services it is using.
    /// </summary>
    std::string getUeid() const;
    void setUeid(std::string const& value);
    bool ueidIsSet() const;
    void unsetUeid();
    /// <summary>
    /// A text message describing an error
    /// </summary>
    std::string getEvent() const;
    void setEvent(std::string const& value);
    bool eventIsSet() const;
    void unsetEvent();

    friend void to_json(nlohmann::json& j, const Event& o);
    friend void from_json(const nlohmann::json& j, Event& o);
protected:
    std::string m_Ueid;
    bool m_UeidIsSet;
    std::string m_Event;
    bool m_EventIsSet;

    // Helper overload for validate. Used when one model stores another model and calls it's validate.
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;
};

}  // namespace model
}  // namespace flexcn_server
}  // namespace oai
#endif /* Event_H_ */
