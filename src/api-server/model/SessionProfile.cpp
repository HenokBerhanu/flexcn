/**
* FlexCN Northbound API
* This API allows xApps to communicate with FlexCN. 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "SessionProfile.h"
#include "Helpers.h"

#include <sstream>

namespace flexcn
{

SessionProfile::SessionProfile()
{
    m_Supi = "";
    m_SupiIsSet = false;
    m_Dnn = "";
    m_DnnIsSet = false;
    m_Amf_addr = "";
    m_Amf_addrIsSet = false;
    m_Pdu_session_type = "";
    m_Pdu_session_typeIsSet = false;
    m_PlmnId = PlmnId();
    m_PlmnIdIsSet = false;
    m_PduSeId = 0;
    m_PduSeIdIsSet = false;
    m_AdIpv4Addr = "";
    m_AdIpv4AddrIsSet = false;
    m_UeIpv4Addr = "";
    m_UeIpv4AddrIsSet = false;
    m_SnssaiIsSet = false;
    m_FlowsIsSet = false;
    
}

bool SessionProfile::is_all_setted(){
    return m_SupiIsSet & m_DnnIsSet & m_Amf_addrIsSet & m_Pdu_session_typeIsSet & m_PlmnIdIsSet 
            & m_PduSeIdIsSet & m_AdIpv4AddrIsSet & m_UeIpv4AddrIsSet & m_SnssaiIsSet & m_FlowsIsSet;
}

void SessionProfile::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw oai::flexcn_server::helpers::ValidationException(msg.str());
    }
}

bool SessionProfile::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool SessionProfile::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "SessionProfile" : pathPrefix;
     
    if (flowsIsSet())
    {
        const std::vector<FlowProfile>& value = m_Flows;
        const std::string currentValuePath = _pathPrefix + ".flows";
                
        
        if (value.size() < 0)
        {
            success = false;
            msg << currentValuePath << ": must have at least 0 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const FlowProfile& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".flows") && success;
 
                i++;
            }
        }

    }
    return success;
}

bool SessionProfile::operator==(const SessionProfile& rhs) const
{
    return
    
    
    
    ((!supiIsSet() && !rhs.supiIsSet()) || (supiIsSet() && rhs.supiIsSet() && getSupi() == rhs.getSupi())) &&
    
    
    ((!dnnIsSet() && !rhs.dnnIsSet()) || (dnnIsSet() && rhs.dnnIsSet() && getDnn() == rhs.getDnn())) &&
    
    
    ((!amfAddrIsSet() && !rhs.amfAddrIsSet()) || (amfAddrIsSet() && rhs.amfAddrIsSet() && getAmfAddr() == rhs.getAmfAddr())) &&
    
    
    ((!pduSessionTypeIsSet() && !rhs.pduSessionTypeIsSet()) || (pduSessionTypeIsSet() && rhs.pduSessionTypeIsSet() && getPduSessionType() == rhs.getPduSessionType())) &&
    
    
    ((!plmnIdIsSet() && !rhs.plmnIdIsSet()) || (plmnIdIsSet() && rhs.plmnIdIsSet())) && //&& getPlmnId() == rhs.getPlmnId())) &&
    
    
    ((!pduSeIdIsSet() && !rhs.pduSeIdIsSet()) || (pduSeIdIsSet() && rhs.pduSeIdIsSet() && getPduSeId() == rhs.getPduSeId())) &&
    
    
    ((!adIpv4AddrIsSet() && !rhs.adIpv4AddrIsSet()) || (adIpv4AddrIsSet() && rhs.adIpv4AddrIsSet() && getAdIpv4Addr() == rhs.getAdIpv4Addr())) &&

    ((!ueIpv4AddrIsSet() && !rhs.ueIpv4AddrIsSet()) || (ueIpv4AddrIsSet() && rhs.ueIpv4AddrIsSet() && getUeIpv4Addr() == rhs.getUeIpv4Addr())) &&
    
    ((!snssaiIsSet() && !rhs.snssaiIsSet()) || (snssaiIsSet() && rhs.snssaiIsSet())) && //getSnssai() == rhs.getSnssai())) &&
    
    
    ((!flowsIsSet() && !rhs.flowsIsSet()) || (flowsIsSet() && rhs.flowsIsSet() && getFlows() == rhs.getFlows()))
    
    ;
}

bool SessionProfile::operator!=(const SessionProfile& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const SessionProfile& o)
{
    j = nlohmann::json();
    if(o.supiIsSet())
        j["supi"] = o.m_Supi;
    if(o.dnnIsSet())
        j["dnn"] = o.m_Dnn;
    if(o.amfAddrIsSet())
        j["amf_addr"] = o.m_Amf_addr;
    if(o.pduSessionTypeIsSet())
        j["pdu_session_type"] = o.m_Pdu_session_type;
    if(o.plmnIdIsSet())
        j["plmnId"] = o.m_PlmnId;
    if(o.pduSeIdIsSet())
        j["pduSeId"] = o.m_PduSeId;
    if(o.adIpv4AddrIsSet())
        j["adIpv4Addr"] = o.m_AdIpv4Addr;
    if(o.ueIpv4AddrIsSet())
        j["ueIpv4Addr"] = o.m_UeIpv4Addr;
    if(o.snssaiIsSet())
        j["snssai"] = o.m_Snssai;
    if(o.flowsIsSet() || !o.m_Flows.empty())
        j["flows"] = o.m_Flows;
    
}

void from_json(const nlohmann::json& j, SessionProfile& o)
{
    if(j.find("supi") != j.end())
    {
        j.at("supi").get_to(o.m_Supi);
        o.m_SupiIsSet = true;
    } 
    if(j.find("dnn") != j.end())
    {
        j.at("dnn").get_to(o.m_Dnn);
        o.m_DnnIsSet = true;
    } 
    if(j.find("amf_addr") != j.end())
    {
        j.at("amf_addr").get_to(o.m_Amf_addr);
        o.m_Amf_addrIsSet = true;
    } 
    if(j.find("pdu_session_type") != j.end())
    {
        j.at("pdu_session_type").get_to(o.m_Pdu_session_type);
        o.m_Pdu_session_typeIsSet = true;
    } 
    if(j.find("plmnId") != j.end())
    {
        j.at("plmnId").get_to(o.m_PlmnId);
        o.m_PlmnIdIsSet = true;
    } 
    if(j.find("pduSeId") != j.end())
    {
        j.at("pduSeId").get_to(o.m_PduSeId);
        o.m_PduSeIdIsSet = true;
    } 
    if(j.find("adIpv4Addr") != j.end())
    {
        j.at("adIpv4Addr").get_to(o.m_AdIpv4Addr);
        o.m_AdIpv4AddrIsSet = true;
    }
    if(j.find("ueIpv4Addr") != j.end())
    {
        j.at("ueIpv4Addr").get_to(o.m_UeIpv4Addr);
        o.m_UeIpv4AddrIsSet = true;
    } 
    if(j.find("snssai") != j.end())
    {
        j.at("snssai").get_to(o.m_Snssai);
        o.m_SnssaiIsSet = true;
    } 
    if(j.find("flows") != j.end())
    {
        j.at("flows").get_to(o.m_Flows);
        o.m_FlowsIsSet = true;
    } 
}

std::string SessionProfile::getSupi() const
{
    return m_Supi;
}
void SessionProfile::setSupi(std::string const& value)
{
    m_Supi = value;
    m_SupiIsSet = true;
}
bool SessionProfile::supiIsSet() const
{
    return m_SupiIsSet;
}
void SessionProfile::unsetSupi()
{
    m_SupiIsSet = false;
}
std::string SessionProfile::getDnn() const
{
    return m_Dnn;
}
void SessionProfile::setDnn(std::string const& value)
{
    m_Dnn = value;
    m_DnnIsSet = true;
}
bool SessionProfile::dnnIsSet() const
{
    return m_DnnIsSet;
}
void SessionProfile::unsetDnn()
{
    m_DnnIsSet = false;
}
std::string SessionProfile::getAmfAddr() const
{
    return m_Amf_addr;
}
void SessionProfile::setAmfAddr(std::string const& value)
{
    m_Amf_addr = value;
    m_Amf_addrIsSet = true;
}
bool SessionProfile::amfAddrIsSet() const
{
    return m_Amf_addrIsSet;
}
void SessionProfile::unsetAmf_addr()
{
    m_Amf_addrIsSet = false;
}
std::string SessionProfile::getPduSessionType() const
{
    return m_Pdu_session_type;
}
void SessionProfile::setPduSessionType(std::string const& value)
{
    m_Pdu_session_type = value;
    m_Pdu_session_typeIsSet = true;
}
bool SessionProfile::pduSessionTypeIsSet() const
{
    return m_Pdu_session_typeIsSet;
}
void SessionProfile::unsetPdu_session_type()
{
    m_Pdu_session_typeIsSet = false;
}
PlmnId SessionProfile::getPlmnId() const
{
    return m_PlmnId;
}
void SessionProfile::setPlmnId(PlmnId const value)
{
    m_PlmnId = value;
    m_PlmnIdIsSet = true;
}
bool SessionProfile::plmnIdIsSet() const
{
    return m_PlmnIdIsSet;
}
void SessionProfile::unsetPlmnId()
{
    m_PlmnIdIsSet = false;
}
int32_t SessionProfile::getPduSeId() const
{
    return m_PduSeId;
}
void SessionProfile::setPduSeId(int32_t const value)
{
    m_PduSeId = value;
    m_PduSeIdIsSet = true;
}
bool SessionProfile::pduSeIdIsSet() const
{
    return m_PduSeIdIsSet;
}
void SessionProfile::unsetPduSeId()
{
    m_PduSeIdIsSet = false;
}
std::string SessionProfile::getAdIpv4Addr() const
{
    return m_AdIpv4Addr;
}
void SessionProfile::setAdIpv4Addr(std::string const& value)
{
    m_AdIpv4Addr = value;
    m_AdIpv4AddrIsSet = true;
}
bool SessionProfile::adIpv4AddrIsSet() const
{
    return m_AdIpv4AddrIsSet;
}
void SessionProfile::unsetAdIpv4Addr()
{
    m_AdIpv4AddrIsSet = false;
}

std::string SessionProfile::getUeIpv4Addr() const
{
    return m_UeIpv4Addr;
}
void SessionProfile::setUeIpv4Addr(std::string const& value)
{
    m_UeIpv4Addr = value;
    m_UeIpv4AddrIsSet = true;
}
bool SessionProfile::ueIpv4AddrIsSet() const
{
    return m_UeIpv4AddrIsSet;
}
void SessionProfile::unsetUeIpv4Addr()
{
    m_UeIpv4AddrIsSet = false;
}

Snssai SessionProfile::getSnssai() const
{
    return m_Snssai;
}
void SessionProfile::setSnssai(Snssai const& value)
{
    m_Snssai = value;
    m_SnssaiIsSet = true;
}
bool SessionProfile::snssaiIsSet() const
{
    return m_SnssaiIsSet;
}
void SessionProfile::unsetSnssai()
{
    m_SnssaiIsSet = false;
}
std::vector<FlowProfile> SessionProfile::getFlows() const
{
    return m_Flows;
}
void SessionProfile::setFlows(std::vector<FlowProfile> const& value)
{
    m_Flows = value;
    m_FlowsIsSet = true;
}
bool SessionProfile::flowsIsSet() const
{
    return m_FlowsIsSet;
}
void SessionProfile::unsetFlows()
{
    m_FlowsIsSet = false;
}

} // namespace org::openapitools::server::model

