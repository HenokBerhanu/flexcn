/**
* FlexCN Northbound API
* This API allows xApps to communicate with FlexCN. 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "FlowProfile.h"
#include "Helpers.h"

#include <sstream>

namespace flexcn
{

FlowProfile::FlowProfile()
{
    m_An_addr = "";
    m_An_addrIsSet = false;
    m_Upf_addr = "";
    m_Upf_addrIsSet = false;
    m_Qfi = 0;
    m_QfiIsSet = false;
    
}

void FlowProfile::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw oai::flexcn_server::helpers::ValidationException(msg.str());
    }
}

bool FlowProfile::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool FlowProfile::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "FlowProfile" : pathPrefix;
    

    return success;
}

bool FlowProfile::operator==(const FlowProfile& rhs) const
{
    return
    
    
    
    ((!anAddrIsSet() && !rhs.anAddrIsSet()) || (anAddrIsSet() && rhs.anAddrIsSet() && getAnAddr() == rhs.getAnAddr())) &&
    
    
    ((!upfAddrIsSet() && !rhs.upfAddrIsSet()) || (upfAddrIsSet() && rhs.upfAddrIsSet() && getUpfAddr() == rhs.getUpfAddr())) &&
    
    
    ((!qfiIsSet() && !rhs.qfiIsSet()) || (qfiIsSet() && rhs.qfiIsSet() && getQfi() == rhs.getQfi()))
    
    ;
}

bool FlowProfile::operator!=(const FlowProfile& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const FlowProfile& o)
{
    j = nlohmann::json();
    if(o.anAddrIsSet())
        j["an_addr"] = o.m_An_addr;
    if(o.upfAddrIsSet())
        j["upf_addr"] = o.m_Upf_addr;
    if(o.qfiIsSet())
        j["qfi"] = o.m_Qfi;
    
}

void from_json(const nlohmann::json& j, FlowProfile& o)
{
    if(j.find("an_addr") != j.end())
    {
        j.at("an_addr").get_to(o.m_An_addr);
        o.m_An_addrIsSet = true;
    } 
    if(j.find("upf_addr") != j.end())
    {
        j.at("upf_addr").get_to(o.m_Upf_addr);
        o.m_Upf_addrIsSet = true;
    } 
    if(j.find("qfi") != j.end())
    {
        j.at("qfi").get_to(o.m_Qfi);
        o.m_QfiIsSet = true;
    } 
    
}

std::string FlowProfile::getAnAddr() const
{
    return m_An_addr;
}
void FlowProfile::setAnAddr(std::string const& value)
{
    m_An_addr = value;
    m_An_addrIsSet = true;
}
bool FlowProfile::anAddrIsSet() const
{
    return m_An_addrIsSet;
}
void FlowProfile::unsetAn_addr()
{
    m_An_addrIsSet = false;
}
std::string FlowProfile::getUpfAddr() const
{
    return m_Upf_addr;
}
void FlowProfile::setUpfAddr(std::string const& value)
{
    m_Upf_addr = value;
    m_Upf_addrIsSet = true;
}
bool FlowProfile::upfAddrIsSet() const
{
    return m_Upf_addrIsSet;
}
void FlowProfile::unsetUpf_addr()
{
    m_Upf_addrIsSet = false;
}
int32_t FlowProfile::getQfi() const
{
    return m_Qfi;
}
void FlowProfile::setQfi(int32_t const value)
{
    m_Qfi = value;
    m_QfiIsSet = true;
}
bool FlowProfile::qfiIsSet() const
{
    return m_QfiIsSet;
}
void FlowProfile::unsetQfi()
{
    m_QfiIsSet = false;
}


} // namespace org::openapitools::server::model

