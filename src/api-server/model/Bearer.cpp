/**
* FlexCN_4G_API
* This API allows SPGWC to communicate with FlexCN. Equivalent of LLMEC API.  
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "Bearer.h"
#include "Helpers.h"

#include <sstream>


namespace oai {
namespace flexcn_server {
namespace model {

Bearer::Bearer()
{
    m_Eps_bearer_id = 0L;
    m_Slice_id = 0L;
    m_Slice_idIsSet = false;
    m_Tos = 0L;
    m_TosIsSet = false;
    m_Imsi = "";
    m_S1_ul_teid = "";
    m_S1_dl_teid = "";
    m_Ue_ip = "";
    m_Enb_ip = "";
    
}

void Bearer::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw oai::flexcn_server::helpers::ValidationException(msg.str());
    }
}

bool Bearer::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool Bearer::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "Bearer" : pathPrefix;
    return success;
}

bool Bearer::operator==(const Bearer& rhs) const
{
    return
    
    
    (getEpsBearerId() == rhs.getEpsBearerId())
     &&
    
    
    ((!sliceIdIsSet() && !rhs.sliceIdIsSet()) || (sliceIdIsSet() && rhs.sliceIdIsSet() && getSliceId() == rhs.getSliceId())) &&
    
    
    ((!tosIsSet() && !rhs.tosIsSet()) || (tosIsSet() && rhs.tosIsSet() && getTos() == rhs.getTos())) &&
    
    (getImsi() == rhs.getImsi())
     &&
    
    (getS1UlTeid() == rhs.getS1UlTeid())
     &&
    
    (getS1DlTeid() == rhs.getS1DlTeid())
     &&
    
    (getUeIp() == rhs.getUeIp())
     &&
    
    (getEnbIp() == rhs.getEnbIp())
    
    
    ;
}

bool Bearer::operator!=(const Bearer& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const Bearer& o)
{
    j = nlohmann::json();
    j["eps_bearer_id"] = o.m_Eps_bearer_id;
    if(o.epsMeterIdIsSet()) {
        j["eps_meter_id"] = o.m_Eps_meter_id;
    }    

    if(o.sliceIdIsSet())
        j["slice_id"] = o.m_Slice_id;
    if(o.tosIsSet())
        j["tos"] = o.m_Tos;
    j["imsi"] = o.m_Imsi;
    j["s1_ul_teid"] = o.m_S1_ul_teid;
    j["s1_dl_teid"] = o.m_S1_dl_teid;
    j["ue_ip"] = o.m_Ue_ip;
    j["enb_ip"] = o.m_Enb_ip;
}

void from_json(const nlohmann::json& j, Bearer& o)
{
    j.at("eps_bearer_id").get_to(o.m_Eps_bearer_id);
    if(j.find("eps_meter_id") != j.end())
    {
        j.at("eps_meter_id").get_to(o.m_Eps_meter_id);
        o.m_Eps_meter_idIsSet = true;
    }
    

    if(j.find("slice_id") != j.end())
    {
        j.at("slice_id").get_to(o.m_Slice_id);
        o.m_Slice_idIsSet = true;
    } 
    if(j.find("tos") != j.end())
    {
        j.at("tos").get_to(o.m_Tos);
        o.m_TosIsSet = true;
    } 
    j.at("imsi").get_to(o.m_Imsi);
    j.at("s1_ul_teid").get_to(o.m_S1_ul_teid);
    j.at("s1_dl_teid").get_to(o.m_S1_dl_teid);
    j.at("ue_ip").get_to(o.m_Ue_ip);
    j.at("enb_ip").get_to(o.m_Enb_ip);
    
}

int64_t Bearer::getEpsBearerId() const
{
    return m_Eps_bearer_id;
}
void Bearer::setEpsBearerId(int64_t const value)
{
    m_Eps_bearer_id = value;
}

int64_t Bearer::getEpsMeterId() const
{
    return m_Eps_meter_id;
}
void Bearer::setEpsMeterId(int64_t const value)
{
    m_Eps_meter_id = value;
    m_Eps_meter_idIsSet = true;
}

bool Bearer::epsMeterIdIsSet() const
{
    return m_Eps_meter_idIsSet;
}
void Bearer::unsetEpsMeterId()
{
    m_Eps_meter_idIsSet = false;
}

int64_t Bearer::getSliceId() const
{
    return m_Slice_id;
}
void Bearer::setSliceId(int64_t const value)
{
    m_Slice_id = value;
    m_Slice_idIsSet = true;
}
bool Bearer::sliceIdIsSet() const
{
    return m_Slice_idIsSet;
}
void Bearer::unsetSlice_id()
{
    m_Slice_idIsSet = false;
}
int64_t Bearer::getTos() const
{
    return m_Tos;
}
void Bearer::setTos(int64_t const value)
{
    m_Tos = value;
    m_TosIsSet = true;
}
bool Bearer::tosIsSet() const
{
    return m_TosIsSet;
}
void Bearer::unsetTos()
{
    m_TosIsSet = false;
}
std::string Bearer::getImsi() const
{
    return m_Imsi;
}
void Bearer::setImsi(std::string const& value)
{
    m_Imsi = value;
}
std::string Bearer::getS1UlTeid() const
{
    return m_S1_ul_teid;
}
void Bearer::setS1UlTeid(std::string const& value)
{
    m_S1_ul_teid = value;
}
std::string Bearer::getS1DlTeid() const
{
    return m_S1_dl_teid;
}
void Bearer::setS1DlTeid(std::string const& value)
{
    m_S1_dl_teid = value;
}
std::string Bearer::getUeIp() const
{
    return m_Ue_ip;
}
void Bearer::setUeIp(std::string const& value)
{
    m_Ue_ip = value;
}
std::string Bearer::getEnbIp() const
{
    return m_Enb_ip;
}
void Bearer::setEnbIp(std::string const& value)
{
    m_Enb_ip = value;
}


}  // namespace api
}  // namespace flexcn_server
}  // namespace oai

